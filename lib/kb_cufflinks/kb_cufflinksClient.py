# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport
import time


class kb_cufflinks(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login',
            service_ver=None,
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def _check_job(self, job_id):
        return self._client._check_job('kb_cufflinks', job_id)

    def _CufflinksCall_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_cufflinks.CufflinksCall', [params],
             self._service_ver, context)

    def CufflinksCall(self, params, context=None):
        """
        :param params: instance of type "CufflinksParams" -> structure:
           parameter "ws_id" of String, parameter "sample_alignment" of
           String, parameter "num_threads" of Long, parameter
           "min-intron-length" of Long, parameter "max-intron-length" of
           Long, parameter "overhang-tolerance" of Long
        :returns: instance of type "ResultsToReport" (Object for Report type)
           -> structure: parameter "report_name" of String, parameter
           "report_ref" of String
        """
        job_id = self._CufflinksCall_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _run_Cuffdiff_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_cufflinks.run_Cuffdiff', [params],
             self._service_ver, context)

    def run_Cuffdiff(self, params, context=None):
        """
        :param params: instance of type "CuffdiffParams" -> structure:
           parameter "ws_id" of String, parameter "rnaseq_exp_details" of
           type "RNASeqSampleSet" -> structure: parameter "sampleset_id" of
           String, parameter "sampleset_desc" of String, parameter "domain"
           of String, parameter "platform" of String, parameter "num_samples"
           of Long, parameter "num_replicates" of Long, parameter
           "sample_ids" of list of String, parameter "condition" of list of
           String, parameter "source" of String, parameter "Library_type" of
           String, parameter "publication_Id" of String, parameter
           "external_source_date" of String, parameter "output_obj_name" of
           String, parameter "time-series" of String, parameter
           "library-type" of String, parameter "library-norm-method" of
           String, parameter "multi-read-correct" of String, parameter
           "min-alignment-count" of Long, parameter "dispersion-method" of
           String, parameter "no-js-tests" of String, parameter
           "frag-len-mean" of Long, parameter "frag-len-std-dev" of Long,
           parameter "max-mle-iterations" of Long, parameter
           "compatible-hits-norm" of String, parameter "no-length-correction"
           of String
        :returns: instance of type "RNASeqDifferentialExpression" (Result of
           run_CuffDiff Object RNASeqDifferentialExpression file structure
           @optional tool_opts tool_version sample_ids comments) ->
           structure: parameter "tool_used" of String, parameter
           "tool_version" of String, parameter "tool_opts" of list of mapping
           from String to String, parameter "file" of type "Handle"
           (@optional hid file_name type url remote_md5 remote_sha1) ->
           structure: parameter "hid" of type "HandleId" (Input parameters
           and output for run_cuffdiff), parameter "file_name" of String,
           parameter "id" of String, parameter "type" of String, parameter
           "url" of String, parameter "remote_md5" of String, parameter
           "remote_sha1" of String, parameter "sample_ids" of list of String,
           parameter "condition" of list of String, parameter "genome_id" of
           String, parameter "expressionSet_id" of type
           "ws_expressionSet_id", parameter "alignmentSet_id" of type
           "ws_alignmentSet_id", parameter "sampleset_id" of type
           "ws_Sampleset_id", parameter "comments" of String
        """
        job_id = self._run_Cuffdiff_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def status(self, context=None):
        return self._client.call_method('kb_cufflinks.status',
                                        [], self._service_ver, context)
